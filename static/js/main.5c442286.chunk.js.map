{"version":3,"sources":["logo.svg","pages/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainPage","state","wasSearched","inputValue","searchResult","isLoaded","handleChange","bind","handleSearch","event","this","setState","target","value","searchInput","replace","fetch","then","res","json","result","results","console","log","inputClass","className","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","Append","Button","onClick","variant","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,iMCsE1BC,G,wDA1Db,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,aAAc,EACdC,WAAY,GACZC,aAAc,GACdC,UAAU,GAGd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVX,E,yDAaAE,GACTC,KAAKC,SAAS,CAACR,WAAYM,EAAMG,OAAOC,U,qCAI5B,IAAD,OACXH,KAAKC,SAAS,CAACT,aAAcQ,KAAKT,MAAMC,cACxC,IAAMY,EAAcJ,KAAKT,MAAME,WAAWY,QAAQ,IAAK,KACvDC,MAAM,yFAA4FF,GACjGG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKT,SAAS,CACZN,UAAU,EACVD,aAAcgB,EAAOC,aAG3BC,QAAQC,IAAIb,KAAKT,MAAMG,gB,+BAKvB,IAAIoB,EAAad,KAAKT,MAAMC,YAAc,YAAc,eAExD,OACI,yBAAKuB,UAAU,YACX,yBAAKA,UAAWD,GACZ,kBAACE,EAAA,EAAD,CAAYD,UAAU,QAClB,kBAACE,EAAA,EAAD,CACIC,YAAY,4BACZC,aAAW,4BACXC,mBAAiB,eACjBC,SAAUrB,KAAKJ,eAEnB,kBAACoB,EAAA,EAAWM,OAAZ,KACI,kBAACC,EAAA,EAAD,CAAQC,QAASxB,KAAKF,aAAc2B,QAAQ,qBAA5C,kB,GAlDLC,IAAMC,Y,MCGdC,MARf,WACE,OACE,yBAAKb,UAAU,OACX,kBAAC,EAAD,QCIYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.5c442286.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './styles/Main.css'\r\n\r\n\r\n// api key a04e46bcb6a28479586d4331d7049f7f\r\n// api url https://api.themoviedb.org/3/movie/550?api_key=a04e46bcb6a28479586d4331d7049f7f\r\n\r\nclass MainPage extends React.Component {\r\n    \r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            wasSearched : false,\r\n            inputValue: '',\r\n            searchResult: [],\r\n            isLoaded: false,\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n    \r\n    handleChange(event) {\r\n        this.setState({inputValue: event.target.value });\r\n    }\r\n\r\n    \r\n    handleSearch() {\r\n        this.setState({wasSearched: !this.state.wasSearched});\r\n        const searchInput = this.state.inputValue.replace(\" \", \"+\"); \r\n        fetch('https://api.themoviedb.org/3/movie/550?api_key=a04e46bcb6a28479586d4331d7049f7f'+'&query='+searchInput)\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              searchResult: result.results\r\n            });\r\n        });\r\n        console.log(this.state.searchResult);\r\n    }\r\n    \r\n    render() {\r\n\r\n        let inputClass = this.state.wasSearched ? \"topSearch\" : \"middleSearch\";\r\n\r\n        return(\r\n            <div className=\"Main-div\">\r\n                <div className={inputClass}>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl\r\n                            placeholder=\"What are you looking for?\"\r\n                            aria-label=\"What are you looking for?\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <InputGroup.Append>\r\n                            <Button onClick={this.handleSearch} variant=\"outline-secondary\">Search</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n\r\n\r\n  export default MainPage;\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport MainPage from './pages/MainPage'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MainPage></MainPage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}