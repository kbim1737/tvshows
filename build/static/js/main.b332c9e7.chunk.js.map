{"version":3,"sources":["logo.svg","components/TvShowCard.js","pages/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TvShowCard","props","console","log","Container","className","Image","src","url","alt","Card","Body","Title","title","Subtitle","firstDate","country","Text","overview","slice","MainPage","searchOutput","state","searchResult","map","item","rowIndex","Row","key","id","wasSearched","inputValue","isLoaded","handleChange","bind","handleSearch","event","this","setState","target","value","path","replace","fetch","then","res","json","response","i","ret","results","length","result","original_name","origin_country","poster_path","first_air_date","push","isloaded","error","inputClass","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","Append","Button","onClick","variant","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b332c9e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport './styles/TvShow.css';\r\nimport Image from 'react-bootstrap/Image'\r\nimport { Container } from 'react-bootstrap';\r\n\r\n\r\n\r\nconst TvShowCard = (props) => {\r\n        \r\n\r\n        console.log(props);\r\n        return(\r\n\r\n            <Container className=\"container2\">\r\n                <Image className=\"image\" src={props.url} alt=\"image\"></Image>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>{props.title}</Card.Title>\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">{props.firstDate}</Card.Subtitle>\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">{props.country}</Card.Subtitle>\r\n                        <Card.Text>\r\n                            {props.overview.slice(0,200)}...\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        );\r\n}\r\n\r\nexport default TvShowCard;\r\n","import React from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport TvShowCard from '../components/TvShowCard';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container'\r\nimport './styles/Main.css'\r\n\r\n\r\n// api key a04e46bcb6a28479586d4331d7049f7f\r\n// api url https://api.themoviedb.org/3/movie/550?api_key=a04e46bcb6a28479586d4331d7049f7f\r\n\r\nclass MainPage extends React.Component {\r\n    \r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            wasSearched : false,\r\n            inputValue: '',\r\n            searchResult: [],\r\n            isLoaded: false,\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.searchOutput = this.searchOutput.bind(this);\r\n    }\r\n    \r\n    handleChange(event) {\r\n        this.setState({inputValue: event.target.value });\r\n    }\r\n\r\n    \r\n    handleSearch() {\r\n        if(!this.state.wasSearched)\r\n            this.setState({wasSearched: !this.state.wasSearched});\r\n        const path =  \"https://api.themoviedb.org/3/search/tv?api_key=a04e46bcb6a28479586d4331d7049f7f&query=\"\r\n                        + this.state.inputValue.replace(\" \", \"+\");\r\n        fetch(path)\r\n        .then(res => res.json())\r\n        .then((response) => {\r\n            let i=0;\r\n            let ret = [];\r\n            for(i=0;i<response.results.length;i++){\r\n                let result={\r\n                    title: response.results[i].original_name,\r\n                    country: response.results[i].origin_country[0],\r\n                    url : \"https://image.tmdb.org/t/p/original\" + response.results[i].poster_path,\r\n                    firstDate: response.results[i].first_air_date,\r\n                    overview: response.results[i].overview,\r\n                    id: response.results[i].id,\r\n                };\r\n                ret.push(result);\r\n          }\r\n          this.setState({searchResult: ret, isloaded:true});   \r\n        },\r\n        (error) => {\r\n            console.log(error);\r\n        }\r\n      );      \r\n    }\r\n\r\n    searchOutput = () =>{\r\n        console.log(this.state.searchResult);\r\n        return(\r\n            <>\r\n             \r\n             <Container>\r\n                {this.state.searchResult.map((item, rowIndex) => (\r\n                <Row key={rowIndex} id=\"row\" >\r\n                    <TvShowCard \r\n                        title={item.title}\r\n                        url={item.url} \r\n                        firstDate={item.firstDate} \r\n                        country={item.country} \r\n                        overview={item.overview}\r\n                        id={item.id}\r\n                        key={rowIndex}></TvShowCard>\r\n                </Row>\r\n                ))}\r\n            </Container>\r\n              \r\n            </>\r\n        )\r\n    }\r\n    \r\n    render() {\r\n\r\n        let inputClass = this.state.wasSearched ? \"topSearch\" : \"middleSearch\";\r\n\r\n        return(\r\n            <div className=\"Main-div\">\r\n                <div className={inputClass}>\r\n                    <InputGroup className=\"mb-5\">\r\n                        <FormControl\r\n                            placeholder=\"What are you looking for?\"\r\n                            aria-label=\"What are you looking for?\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <InputGroup.Append>\r\n                            <Button onClick={this.handleSearch} variant=\"dark\">Search</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </div>\r\n                {this.state.isloaded ? this.searchOutput() : ''}\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n\r\n\r\n  export default MainPage;\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport MainPage from './pages/MainPage'\nimport './App.css';\n// import Background from '.pages/static/red_cine.jpeg';\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n        <MainPage></MainPage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}